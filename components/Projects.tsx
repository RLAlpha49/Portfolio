import { useRef, useState } from 'react'
import Image from 'next/image'
import { ExternalLink, Github } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { useIntersectionObserver } from '@/hooks/useIntersectionObserver'
import { Modal, ModalContent, ModalHeader, ModalTitle, ModalDescription, ModalFooter } from '@/components/ui/modal'

const projects = [
  {
    name: 'Anilist Manga Updater',
    description: 'A Python script that updates a user\'s manga list on Anilist using a Kenmei export file',
    longDescription: 'This Python script automates the process of updating a user\'s manga list on Anilist by utilizing data from a Kenmei export file. It streamlines the synchronization process for manga enthusiasts who use both Kenmei and Anilist platforms.',
    technologies: ['Python', 'GUI', 'Anilist API'],
    category: 'Automation Tool',
    github: 'https://github.com/RLAlpha49/Anilist-Manga-Updater',
    demo: null,
    image: 'https://i.imgur.com/Hi67MNG.png',
    features: [
      'Synchronization between Kenmei and Anilist',
      'User-friendly GUI interface',
      'Efficient manga list updating'
    ],
  },
  {
    name: 'AniCards',
    description: 'A Flask application that generates SVG stat cards for AniList users',
    longDescription: 'AniCards is a dynamic Flask application that retrieves and displays user data from AniList in the form of attractive SVG stat cards. It\'s ideal for anime enthusiasts and data visualization fans alike.',
    technologies: ['Python', 'Flask', 'JavaScript', 'CSS', 'HTML', 'PostgreSQL'],
    category: 'Web Application',
    github: 'https://github.com/RLAlpha49/AniCards',
    demo: 'https://anicards.alpha49.com',
    image: 'https://imgur.com/FPWa4Vl.png',
    features: [
      'Fetches user data from AniList using GraphQL API',
      'Generates visually appealing SVG stat cards',
      'Caches generated SVGs in PostgreSQL database'
    ],
  },
  {
    name: 'AniSearch',
    description: 'A Next.js web application for searching anime and manga using description-based queries',
    longDescription: 'AniSearch is a Next.js web application that allows users to search for anime and manga using description-based queries. It leverages models and embeddings generated by the AniSearchModel project to provide accurate and relevant search results.',
    technologies: ['TypeScript', 'Next.js', 'React', 'Tailwind CSS'],
    category: 'Web Application',
    github: 'https://github.com/RLAlpha49/AniSearch',
    demo: 'https://anisearch.alpha49.com',
    image: 'https://imgur.com/cgGtSWa.png',
    features: [
      'Description-based search for anime and manga',
      'Utilizes embeddings for semantic similarity',
      'Responsive and user-friendly interface'
    ],
  },
  {
    name: 'AniSearchModel',
    description: 'A machine learning model for generating embeddings and calculating semantic similarities for anime and manga descriptions',
    longDescription: 'AniSearchModel leverages Sentence-BERT (SBERT) models to generate embeddings for synopses, enabling the calculation of semantic similarities between descriptions. This allows users to find the most similar anime or manga based on a given description.',
    technologies: ['Python', 'Flask', 'NLP', 'Machine Learning', 'Sentence-BERT'],
    category: 'Machine Learning',
    github: 'https://github.com/RLAlpha49/AniSearchModel',
    demo: null,
    image: '/placeholder.svg?height=200&width=300',
    features: [
      'Data loading and preprocessing from multiple datasets',
      'Embedding generation using SBERT models',
      'Similarity analysis using cosine similarity',
      'Flask-based API for model interaction',
      'Comprehensive test suite using pytest'
    ],
  },
  {
    name: 'AniList List Manager',
    description: 'A Vue.js application for managing AniList in a more personalized way',
    longDescription: 'This Vue.js application allows users to manage their AniList in a highly customizable manner. It provides features to fetch the list of the authenticated AniList user, move entries to specific custom lists, and sort entries based on various criteria such as status, score, rereads, and type (Manga, Manhwa, Manhua).',
    technologies: ['Vue.js', 'JavaScript', 'CSS', 'HTML', 'AniList API'],
    category: 'Web Application',
    github: 'https://github.com/RLAlpha49/AnilistListManager',
    demo: 'https://anilist-list-manager.alpha49.com/custom-list-manager/custom-list-home',
    image: 'https://imgur.com/HLJJIvr.png',
    features: [
      'Fetch and display authenticated user\'s AniList',
      'Move entries to specific custom lists',
      'Sort entries based on multiple criteria',
      'Personalized list management'
    ],
  },
  {
    name: 'Spotify Skip Tracker',
    description: 'A Python application to monitor Spotify playback and track skipping behavior',
    longDescription: 'Spotify Skip Tracker is a Python-based GUI application that monitors your Spotify playback, tracks your song-skipping behavior, and automatically unlikes songs that you skip more than a specified threshold. It enhances your Spotify experience by keeping track of the tracks you frequently skip and manages your liked songs efficiently.',
    technologies: ['Python', 'Tkinter', 'CustomTkinter', 'Spotify API', 'Flask'],
    category: 'Desktop Application',
    github: 'https://github.com/RLAlpha49/SpotifySkipTracker',
    demo: null,
    image: 'https://i.imgur.com/vYxE6gO.png',
    features: [
      'Real-time Spotify playback monitoring',
      'Automatic unliking of frequently skipped songs',
      'Comprehensive logging of playback events',
      'Customizable settings for skip thresholds and appearance',
      'User-friendly GUI built with CustomTkinter'
    ],
  },
]

export function Projects() {
  const ref = useRef<HTMLDivElement>(null)
  const isIntersecting = useIntersectionObserver({ ref, threshold: 0.1, triggerOnce: true })
  const [selectedProject, setSelectedProject] = useState<typeof projects[0] | null>(null)

  const handleCardClick = (project: typeof projects[0]) => {
    setSelectedProject(project)
  }

  const handleButtonClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
    e.stopPropagation()
  }

  return (
    <section ref={ref} className="py-16 bg-secondary dark:bg-gray-800">
      <div className={`container mx-auto px-4`}>
        <h2 className={`text-3xl font-bold mb-8 text-foreground dark:text-gray-100 text-center transition-all duration-600 ease-out ${isIntersecting ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-5'}`}>My Projects</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((project, index) => (
            <Card 
              key={index} 
              className={`bg-card dark:bg-gray-800 border-border dark:border-gray-600 overflow-hidden transition-all duration-300 hover:shadow-[0_0_15px_rgba(147,51,234,0.5)] dark:hover:shadow-[0_0_15px_rgba(37,99,235,0.5)] transform hover:scale-105 cursor-zoom-in ${isIntersecting ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-5'}`}
              style={{ transitionDelay: `${index * 100}ms` }}
              onClick={() => handleCardClick(project)}
            >
              <CardHeader>
                <CardTitle className="text-card-foreground dark:text-gray-100">{project.name}</CardTitle>
                <CardDescription className="text-muted-foreground dark:text-gray-300">{project.category}</CardDescription>
              </CardHeader>
              <CardContent>
                <Image 
                  src={project.image} 
                  alt={project.name} 
                  width={300}
                  height={200}
                  className="rounded-lg shadow-lg mb-4 w-full object-cover"
                  loading="lazy"
                  />
                <p className="mb-4 text-muted-foreground dark:text-gray-300">{project.description}</p>
                <div className="flex flex-wrap gap-2">
                  {project.technologies.map((tech, techIndex) => (
                    <Badge key={techIndex} className="text-primary-foreground dark:text-gray-100 bg-primary dark:bg-blue-600 hover:bg-primary dark:hover:bg-blue-600">
                      {tech}
                    </Badge>
                  ))}
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <Button asChild className="bg-primary dark:bg-blue-600 text-primary-foreground dark:text-gray-100 hover:bg-primary/90 dark:hover:bg-blue-700 transition-all duration-300 cursor-pointer">
                  <a href={project.github} target="_blank" rel="noopener noreferrer" onClick={handleButtonClick}>
                    <Github className="mr-2 h-4 w-4" /> GitHub
                  </a>
                </Button>
                {project.demo && (
                  <Button asChild className="bg-primary dark:bg-blue-600 text-primary-foreground dark:text-gray-100 hover:bg-primary/90 dark:hover:bg-blue-700 transition-all duration-300 cursor-pointer">
                    <a href={project.demo} target="_blank" rel="noopener noreferrer" onClick={handleButtonClick}>
                      <ExternalLink className="mr-2 h-4 w-4" /> Live Demo
                    </a>
                  </Button>
                )}
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>

      <Modal open={!!selectedProject} onOpenChange={() => setSelectedProject(null)}>
        <ModalContent className="bg-background dark:bg-gray-900 text-foreground dark:text-gray-100 transition-all duration-300 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95">
          <ModalHeader>
            <ModalTitle className="text-3xl text-primary dark:text-blue-400">{selectedProject?.name}</ModalTitle>
            <ModalDescription className="text-xl text-muted-foreground dark:text-gray-300">{selectedProject?.category}</ModalDescription>
          </ModalHeader>
          <div className="py-4 grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Image 
                src={selectedProject?.image || '/placeholder.svg'} 
                alt={selectedProject?.name || 'Project'} 
                width={600}
                height={400}
                className="rounded-lg shadow-lg mb-4 w-full object-cover"
              />
              <div className="flex flex-wrap gap-2 mb-4">
                {selectedProject?.technologies.map((tech, techIndex) => (
                  <Badge key={techIndex} variant="secondary" className="text-primary-foreground dark:text-gray-100 bg-primary dark:bg-blue-600 hover:bg-primary dark:hover:bg-blue-600">
                    {tech}
                  </Badge>
                ))}
              </div>
            </div>
            <div>
              <p className="mb-4 text-muted-foreground dark:text-gray-300 text-lg leading-relaxed">{selectedProject?.longDescription}</p>
              <h3 className="text-2xl font-semibold mb-2 text-primary dark:text-blue-400">Key Features:</h3>
              <ul className="list-none mb-4 text-muted-foreground dark:text-gray-300">
                {selectedProject?.features.map((feature, index) => (
                  <li key={index} className="mb-2 flex items-start">
                    <span className="text-primary dark:text-blue-400 mr-2">•</span>
                    <span>{feature}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          <ModalFooter>
            <Button asChild className="bg-primary dark:bg-blue-600 text-primary-foreground dark:text-gray-100 hover:bg-primary/90 dark:hover:bg-blue-700 transition-all duration-300 cursor-pointer">
              <a href={selectedProject?.github} target="_blank" rel="noopener noreferrer">
                <Github className="mr-2 h-4 w-4" /> GitHub
              </a>
            </Button>
            {selectedProject?.demo && (
              <Button asChild className="bg-primary dark:bg-blue-600 text-primary-foreground dark:text-gray-100 hover:bg-primary/90 dark:hover:bg-blue-700 transition-all duration-300 cursor-pointer">
                <a href={selectedProject?.demo} target="_blank" rel="noopener noreferrer">
                  <ExternalLink className="mr-2 h-4 w-4" /> Live Demo
                </a>
              </Button>
            )}
          </ModalFooter>
        </ModalContent>
      </Modal>
    </section>
  )
}

